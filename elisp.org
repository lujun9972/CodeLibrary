#+TITLE: elisp代码收集
#+AUTHOR: DarkSun
#+OPTIONS: ^{}
* 若选择了Region,则返回Region的起始位置,否则返回THING的类型
  #+BEGIN_SRC emacs-lisp
    (defun bounds-of-region-or-thing (THING)
      "若有active region则返回region的起始位置,否则返回光标所代表THING的位置"
      (if (region-active-p) 
          (cons (region-beginning) (region-end))
        (bounds-of-thing-at-point THING)))
  #+END_SRC
* 若选择了Region,则返回Region的文本内容,否则返回THING的内容
  #+BEGIN_SRC emacs-lisp
    (defun get-region-or-thing (THING)
      "若有active region则返回region的起始位置,否则返回光标所代表THING的位置"
      (if (region-active-p) 
          (buffer-substring-no-properties (region-beginning) (region-end))
        (thing-at-point THING)))
  #+END_SRC
* Buffer相关函数
  #+BEGIN_SRC emacs-lisp
    (defun buffer-contents (&optional buffer-name)
      "获取指定buffer的内容"
      (let (buffer)
        (when (null buffer-name)
          (setq buffer-name (buffer-name)))
        (setq buffer (get-buffer(format "%s" buffer-name)))
        (when buffer
          (with-temp-buffer
            (insert-buffer buffer)
            (buffer-string)))))

    (defun buffer-line-to-list (buffer-name)
      "读取buffer的内容到list中"
      (split-string (buffer-contents buffer-name) "[\n\r]+"))

    (defmacro do-buffer-line (var buffer-name  &rest body)
      "针对buffer的每一行内容作操作,类似dolist"
      `(dolist (,var (buffer-line-to-list ,buffer-name)) 
         ,@body))

  #+END_SRC
* 调用外部程序打开文件
  #+BEGIN_SRC emacs-lisp
    (defun ergoemacs-open-in-external-app ()
      "Open the current file or dired marked files in external app."
      (interactive)
      (let ( doIt
             (myFileList
              (cond
               ((string-equal major-mode "dired-mode") (dired-get-marked-files))
               (t (list (buffer-file-name))) ) ) )
    
        (setq doIt (if (<= (length myFileList) 5)
                       t
                     (y-or-n-p "Open more than 5 files?") ) )
    
        (when doIt
          (cond
           ((string-equal system-type "windows-nt")
            (mapc (lambda (fPath) (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" fPath t t)) ) myFileList)
            )
           ((string-equal system-type "darwin")
            (mapc (lambda (fPath) (shell-command (format "open \"%s\"" fPath)) )  myFileList) )
           ((string-equal system-type "gnu/linux")
            (mapc (lambda (fPath) (let ((process-connection-type nil)) (start-process "" nil "xdg-open" fPath)) ) myFileList) ) ) ) ) )
    
  #+END_SRC
  
* 使用系统文件管理器打开文件
  #+BEGIN_SRC emacs-lisp
    (defun ergoemacs-open-in-desktop ()
      "Show current file in desktop (OS's file manager)."
      (interactive)
      (cond
       ((string-equal system-type "windows-nt")
        (w32-shell-execute "explore" (replace-regexp-in-string "/" "\\" default-directory t t)))
       ((string-equal system-type "darwin") (shell-command "open ."))
       ((string-equal system-type "gnu/linux")
        (let ((process-connection-type nil)) (start-process "" nil "xdg-open" "."))
        ;; (shell-command "xdg-open .") ;; 2013-02-10 this sometimes froze emacs till the folder is closed. ⁖ with nautilus
        ) ))
    
  #+END_SRC
* 使用Macro处理多个文件
  #+BEGIN_SRC emacs-lisp
    (defun execute-kdb-macro-on-file (file-path)
      (interactive "s请输入要执行macro的文件路径")
      (find-file file-path)
      (kmacro-call-macro nil))
    
    (defun execute-kdb-macro-on-multi-files ()
      (interactive)
      (let ((file-list (if (string= major-mode "dired-mode") (dired-get-marked-files) (list buffer-file-name))))
        (mapc 'execute-kdb-macro-on-file file-list)))
  #+END_SRC
* 记录代码片段到特定文件中
  #+BEGIN_SRC emacs-lisp
    (defvar mode-file-map '((c++-mode . "cpp.org")
                            (emacs-lisp-mode . "elisp.org")
                            (python-mode . "python.org")
                            (perl-mode . "perl.org")
                            (dos-mode . "bat.org")
                            (sh-mode . "bash.org"))
      "映射major-mode与保存代码片段文件的对应关系"
      )
    
    (defvar code-library-path "d:/CodeLibrary/"
      "代码库文件存储的目录"
      )
    (defun save-code-to-library()
      (interactive)
      (let (
            (code (get-region-or-thing 'defun))
            (library-file (concat code-library-path (cdr (assoc major-mode mode-file-map))))
            (head (read-string "请输入这段代码的说明"))
            (code-major-mode (replace-regexp-in-string "-mode$" "" (format "%s" major-mode))))
        (when (string= library-file code-library-path)
          (setq library-file (concat code-library-path "temp.org")))
        (find-file library-file)
        (end-of-buffer)
        (newline)
        (insert (concat "* " head))
        (newline-and-indent)
        (insert (concat "#+BEGIN_SRC " code-major-mode))
        (newline-and-indent)
        (newline-and-indent)
        (insert "#+END_SRC")
        (forward-line -1)                   ;上一行
        (org-edit-src-code)
        (insert code)
        (org-edit-src-exit)
        (org-set-tags-command)              ;设置代码tags
        (save-buffer)
        ;; (kill-buffer)
      ))
  #+END_SRC
		
* 获取当前文件的绝对路径
  #+BEGIN_SRC emacs-lisp
    (defun fullpath-relative-to-current-file (file-relative-path)
      "Returns the full path of FILE-RELATIVE-PATH, relative to file location where this function is called.
    
    Example: If you have this line
     (fullpath-relative-to-current-file \"../xyz.el\")
    in the file at
     /home/mary/emacs/emacs_lib.el
    then the return value is
     /home/mary/xyz.el
    Regardless how or where emacs_lib.el is called.
    
    This function solves 2 problems.
    
     ① If you have file A, that calls the `load' on a file at B, and
    B calls “load” on file C using a relative path, then Emacs will
    complain about unable to find C. Because, emacs does not switch
    current directory with “load”.
    
     To solve this problem, when your code only knows the relative
    path of another file C, you can use the variable `load-file-name'
    to get the current file's full path, then use that with the
    relative path to get a full path of the file you are interested.
    
     ② To know the current file's full path, emacs has 2 ways:
    `load-file-name' and `buffer-file-name'. If the file is loaded
    by “load”, then load-file-name works but buffer-file-name
    doesn't. If the file is called by `eval-buffer', then
    load-file-name is nil. You want to be able to get the current
    file's full path regardless the file is run by “load” or
    interactively by “eval-buffer”."
      (concat (file-name-directory (or load-file-name buffer-file-name)) file-relative-path)
      )
  #+END_SRC
  
* 为指定域加上前后缀
  #+BEGIN_SRC emacs-lisp
    (defun around-region-with(prefix suffix)
      (interactive (let (s1 s2)
                     (setq s1 (read-string "请输入前缀" nil nil "\""))
                     (setq s2 (read-string "请输入后缀" nil nil "\""))
                     (list s1 s2)))
      (let* ((p (bounds-of-region-or-thing 'word)) (p1 (car p)) (p2 (cdr p)))
        (goto-char p1)
        (insert prefix)
        (goto-char (+ p2 1))
        (insert suffix)
        )
      )
  #+END_SRC

* 根据金山词霸的单词本查找单词
  #+BEGIN_SRC emacs-lisp
    (defvar js-dictinoary-path "c:/默认生词本.txt")
    (defun get-content-at-point-js()
      "从金山生词本中抽取出中文解释"
      (beginning-of-line)
      (setq p1 (+ 1 (point)))
      (search-forward-regexp (concat "^" "@[0-9]*" "$"))
      (setq p2 (- (line-beginning-position) 1))
      (buffer-substring p1 p2))
    (defun transformer-js()
      (interactive)
      (let* ( english-word search-word  p1 p2)
        (setq english-word (get-region-or-thing 'word))
        (setq search-word (concat "+" english-word))
        (with-temp-buffer
          (insert-file-contents js-dictinoary-path)
          (goto-char (point-min))
          (setq p1 (search-forward-regexp (concat "^" search-word "$") nil t))
          (if (equal nil p1)
              (progn
                (setq p1 (search-forward-regexp (concat "^" search-word) nil t))
                (if (equal nil p1)
                    (message "未找到对应的解释")
                  (message "%s" (get-content-at-point-js))))
            (message "%s" (get-content-at-point-js))))))

    (bindings--define-key global-map (kbd "C-c C-c") 'transformer-js)
  #+END_SRC

* file相关
** 获取文件大小
   #+BEGIN_SRC emacs-lisp
     (defun file-size(file-path)
       "获取文件的字节数"
       (nth 7 (file-attributes file-path)))
   #+END_SRC
   
** 连接文件路径
   #+BEGIN_SRC emacs-lisp
     (defun file-concat(dir file)
       (concat (file-name-as-directory dir) file))
   #+END_SRC
   
** 计算文件内容的md5
   #+BEGIN_SRC emacs-lisp
     (defun file-md5(path)
       (with-temp-buffer
           (insert-file-contents path)
         (md5 (buffer-string))))
   #+END_SRC
* Org file中便捷创建指向attachment目录中文件的链接 						:org:
  #+BEGIN_SRC emacs-lisp
    (defun org-insert-attachment-link (&optional attachment-file-name)
      " Org file中便捷创建指向attachment目录中文件的链接"
      (interactive)
      (let (attachment-directory attachment-file-path)
        (setq attachment-directory (org-attach-expand ""))
        (if (null attachment-file-name)
            (setq attachment-file-path (read-file-name "请输入附件名称: " attachment-directory))
          (setq attachment-file-path (concat (file-name-as-directory attachment-directory)  attachment-file-name))
        )
        (org-insert-link nil (concat "./" (file-relative-name attachment-file-path)) nil)))
  #+END_SRC
* Org file中添加附件,并增加指向附件的链接
  #+BEGIN_SRC emacs-lisp
    (defun org-add-attachment-and-link ()
      " Org file中添加附件,并增加指向附件的链接"
      (interactive)
      (let (attachment-file-name attachment-file-path)
        (setq attachment-file-path (read-file-name "请输入要添加为附件的文件路径"))
        (setq attachment-file-name (file-name-nondirectory attachment-file-path))
        (org-attach-attach attachment-file-path nil 'cp)
        (org-insert-attachment-link attachment-file-name)))
  #+END_SRC
* Org Gamification 												   :tag:game:
  游戏化是一个很火的概念,Org-mode是一个实现GTD的极好工具,将两者结合起来想必非常有趣. 

  下面就是一个简单的对Org-mode游戏化的尝试,主要就是通过完成任务赚取积分,用然后用积分购买奖励物品.
** 积分操作
   完成任务可以获取到积分,默认情况下[#A]级任务增加30积分,[#B]级任务增加20积分,[#C]级任务增加10积分.
   
   但可以通过为每个entry设置REWARD属性的方式自定义完成该entry所获得的奖励积分数,需要为整数.
   #+BEGIN_SRC emacs-lisp
     
     (defun org-gamification-point-to-score()
       "定位到积分行"
       (interactive)
       (goto-char (point-min))
       (when (not (search-forward-regexp "^#\\+SCORES: " nil t))
         (goto-char (point-max))
         (if (search-backward-regexp "^#\\+" nil t)
             (progn
               (end-of-line)
               (newline))
           (progn
           (goto-char (point-min))
           (newline)
           (previous-line)))
         (beginning-of-line)
         (insert "#+SCORES: "))
     )
     
     (defun org-gamification-get-score()
       "获取当前累计的积分数量"
       (save-excursion
         (org-gamification-point-to-score)
         (string-to-int (buffer-substring-no-properties (point) (line-end-position))))
     )
     
     (defun org-gamification-update-score(&optional newScore)
       "更新当前积分"
       (save-excursion
         (org-gamification-point-to-score)
         (insert (number-to-string newScore))
         (insert " points")
         (backward-word)
         (kill-line)))
     
     (defun org-gamification-add-score (score)
       "增加指定积分"
       (save-excursion
         (let (newScore)
           (setq newScore (+ score (org-gamification-get-score)))
           (org-gamification-update-score newScore))))
     
     (defun org-gamification-remove-score-able-p (score)
       "判断是否能够扣减指定分数"
       (> (org-gamification-get-score) score))
     
     (defun org-gamification-remove-score (score)
       "减少指定积分"
       (save-excursion
         (if (org-gamification-remove-score-able-p score)
             (org-gamification-update-score (- (org-gamification-get-score) score))
           (message "积分不足"))))
     
     (defun org-gamification-get-entry-reward-score ()
       "获取完成entry该获得的积分"
       (save-excursion
         ;;(org-back-to-heading t)
         (if (org-entry-get nil "REWARD" t)
             (string-to-int (org-entry-get nil "REWARD" t))
           (+ 10 (/ (org-get-priority (thing-at-point 'line)) 100)))))
   #+END_SRC
** 奖励操作
   可以使用积分购买奖励物品,带有`REWARD`标签的headline被认为是奖励物品
   
   将奖励物品的标记为完成状态表示购买该奖励物品,会减少积分

   使用命令`org-gamification-point-to-reward`跳转到奖励物品部分的headline处

   使用命令`org-gamification-add-reward`来增加待购买的奖励物品

   #+BEGIN_SRC emacs-lisp
     (defun org-gamification-point-to-reward ()
       "跳转到REWARD headline"
       (interactive)
       (let (reward-headline-pos)
         (setq reward-headline-pos (org-find-exact-headline-in-buffer "REWARDS" nil t))
         (when (null reward-headline-pos)
           (goto-char (point-max))
           (newline)
           (beginning-of-line)
           (insert "* REWARDS")
           (beginning-of-line)
           (setq reward-headline-pos (point))
           )
         (goto-char reward-headline-pos))
       )
     
     (defun org-gamification-add-reward ()
       "增加奖励物品,需要用积分购买"
       (interactive)
       (save-excursion
         (let (reward-name reward-price)
           (org-gamification-point-to-reward)
           (end-of-line)
           (setq reward-name (read-string "请输入奖品名称: "))
           (org-insert-subheading nil)
           (insert reward-name)
           (setq reward-price (read-string "请输入奖品价格(整数): "))
           (org-set-property "PRICE" (int-to-string (string-to-int reward-price)))
           (org-set-tags-to ":REWARD:")
           ))
       )
     
     (defun org-gamification-buy-reward-able-p()
       "判断是否能够购买奖励物品"
       (if (org-entry-get nil "PRICE" t)
           (org-gamification-remove-score-able-p (string-to-int (org-entry-get nil "PRICE" t)))
         (progn
           (message "该奖励没有设置PRICE")
           nil)))
     
     (defun org-gamification-buy-reward ()
       "购买奖励物品,会减少积分"
       (when (org-gamification-buy-reward-able-p)
         (org-gamification-remove-score (string-to-int (org-entry-get nil "PRICE" t)))))
     
     (defun org-gamification-sell-reward ()
       "售卖奖励物品,会增加积分"
       (if (org-entry-get nil "PRICE" t)
           (org-gamification-add-score (string-to-int (org-entry-get nil "PRICE" t)))
         (message "该奖励没有设置PRICE"))
       )
   #+END_SRC
** 游戏环境初始化
   使用命令`org-gamification-init`来初始化游戏,积分会清空为0

   使用命令`org-gamification-start`来开启游戏

   使用命令`org-gamification-end`来关闭游戏
   #+BEGIN_SRC emacs-lisp
     (defun org-gamification-reward-p ()
       "判断该entry是否属于奖励"
       (save-excursion
           (org-back-to-heading)
           (find "REWARD" (org-get-tags) :test 'string=)))
     
     (defun org-gamification-entry-trigger (task-plist)
       "完成事项,增加积分"
       (let (from-state to-state )
         (setq from-state (plist-get task-plist :from))
         (setq to-state (plist-get task-plist :to))
         (save-excursion
           (when (and (member to-state org-done-keywords) ( or (member from-state org-not-done-keywords) (null from-state)))
             (if (org-gamification-reward-p)
                 (org-gamification-buy-reward)
               (org-gamification-add-score (org-gamification-get-entry-reward-score))))
           (when (and (or (member to-state org-not-done-keywords) (null to-state)) (member from-state org-done-keywords))
             (if (org-gamification-reward-p)
                 (org-gamification-sell-reward)
               (org-gamification-remove-score (org-gamification-get-entry-reward-score))))
           ))
       )
     
     (defun org-gamification-entry-blocker (task-plist)
       "若动作会将积分变成负数,则不能进行该动作"
       (let (from-state to-state )
         (setq from-state (plist-get task-plist :from))
         (setq to-state (plist-get task-plist :to))
         (save-excursion
           (cond ((and (member to-state org-done-keywords) ( or (member from-state org-not-done-keywords) (null from-state)))
                  (if (org-gamification-reward-p)
                      (org-gamification-buy-reward-able-p)
                    t))
                 ((and (or (member to-state org-not-done-keywords) (null to-state)) (member from-state org-done-keywords))
                  (if (not (org-gamification-reward-p))
                      (org-gamification-remove-score-able-p (org-gamification-get-entry-reward-score))
                    t))
                 (t t))
           ))
     )
     (defun org-gamification-init()
       "org游戏化初始化函数
          初始化积分为0
          初始化游戏的hook
          "
       (org-gamification-update-score 0)
       (org-gamification-start)
       )
     
     (defun org-gamification-start ()
       "初始化游戏的hook"
       (interactive)
       (add-to-list 'org-trigger-hook 'org-gamification-entry-trigger)
       (add-to-list 'org-blocker-hook 'org-gamification-entry-blocker)
       )
     
     (defun org-gamification-end ()
       "结束游戏"
       (interactive)
       (setq org-trigger-hook (remove 'org-gamification-entry-trigger org-trigger-hook))
       (setq org-blocker-hook (remove 'org-gamification-entry-blocker org-blocker-hook))
       )
   #+END_SRC
