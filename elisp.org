#+TITLE: elisp代码收集
#+AUTHOR: DarkSun
#+OPTIONS: ^{}
* 使用Macro处理多个文件
  #+BEGIN_SRC emacs-lisp
    (defun execute-kdb-macro-on-file (file-path)
      (interactive "s请输入要执行macro的文件路径")
      (find-file file-path)
      (kmacro-call-macro nil))
    
    (defun execute-kdb-macro-on-multi-files ()
      (interactive)
      (let ((file-list (if (string= major-mode "dired-mode") (dired-get-marked-files) (list buffer-file-name))))
        (mapc 'execute-kdb-macro-on-file file-list)))
  #+END_SRC
* 为指定域加上前后缀
  #+BEGIN_SRC emacs-lisp
    (defun around-region-with(prefix suffix)
      (interactive (let (s1 s2)
                     (setq s1 (read-string "请输入前缀" nil nil "\""))
                     (setq s2 (read-string "请输入后缀" nil nil "\""))
                     (list s1 s2)))
      (let* ((p (bounds-of-region-or-thing 'word)) (p1 (car p)) (p2 (cdr p)))
        (goto-char p1)
        (insert prefix)
        (goto-char (+ p2 1))
        (insert suffix)
        )
      )
  #+END_SRC

* 根据金山词霸的单词本查找单词
  #+BEGIN_SRC emacs-lisp
    (defvar js-dictinoary-path "c:/默认生词本.txt")
    (defun get-content-at-point-js()
      "从金山生词本中抽取出中文解释"
      (beginning-of-line)
      (setq p1 (+ 1 (point)))
      (search-forward-regexp (concat "^" "@[0-9]*" "$"))
      (setq p2 (- (line-beginning-position) 1))
      (buffer-substring p1 p2))
    (defun transformer-js()
      (interactive)
      (let* ( english-word search-word  p1 p2)
        (setq english-word (get-region-or-thing 'word))
        (setq search-word (concat "+" english-word))
        (with-temp-buffer
          (insert-file-contents js-dictinoary-path)
          (goto-char (point-min))
          (setq p1 (search-forward-regexp (concat "^" search-word "$") nil t))
          (if (equal nil p1)
              (progn
                (setq p1 (search-forward-regexp (concat "^" search-word) nil t))
                (if (equal nil p1)
                    (message "未找到对应的解释")
                  (message "%s" (get-content-at-point-js))))
            (message "%s" (get-content-at-point-js))))))

    (bindings--define-key global-map (kbd "C-c C-c") 'transformer-js)
  #+END_SRC


* Show current timer task in header line
#+BEGIN_SRC emacs-lisp
(require 'org)
(require 'org-timer)
(require 'cl-lib)

(defvar my/org-timer-current-task nil)

(defun my/org-timer-start-hook ()
  (setq my/org-timer-current-task (nth 4 (org-heading-components)))
  (cl-loop for buf in (buffer-list)
           unless (string-match-p "\\`[[:space:]*]" (buffer-name buf))
           do
           (with-current-buffer buf
             (setq-local header-line-format '((" " my/org-timer-current-task " ")))))
  (setq-default header-line-format '((" " my/org-timer-current-task " "))))

(defun my/org-timer-end-hook ()
  (cl-loop for buf in (buffer-list)
           do
           (setq header-line-format nil))
  (setq-default header-line-format nil))

(dolist (hook '(org-timer-set-hook))
  (add-hook hook #'my/org-timer-start-hook))

(dolist (hook '(org-timer-done-hook org-timer-cancel-hook))
  (add-hook hook #'my/org-timer-end-hook))
#+END_SRC
